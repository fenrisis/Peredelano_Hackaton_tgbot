from aiogram import types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import Message
import db 
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def setup_handlers(dp, bot):


 class ProfileForm(StatesGroup):
    role = State()
    experience = State()
    tech_stack = State()
    idea = State()
    linkedin = State()
    hackathon_username = State()


 class EditProfileForm(StatesGroup):
    select_field = State()
    new_value = State()

 class TeamForm(StatesGroup):
    name = State()
    idea = State()
    required_roles = State()

 class EditTeamForm(StatesGroup):
    select_field = State()
    new_value = State()


 def role_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    roles = ["Backend", "Frontend", "Mobile", "Full-stack", "DevOps", "QA", "UI Designer", "UX Designer", "ML", "PM"]
    for role in roles:
        markup.add(KeyboardButton(role))
    return markup
 
 def experience_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    experiences = ["–î–æ –≥–æ–¥–∞", "1-3 –≥–æ–¥–∞", "3-5 –ª–µ—Ç", "–°–≤—ã—à–µ 5 –ª–µ—Ç", "–ù–µ —Ä–∞–±–æ—Ç–∞—é"]
    for experience in experiences:
        markup.add(KeyboardButton(experience))
    return markup
 
 
 @dp.message_handler(Command("profile"), state=None)
 async def profile_command(message: Message):
    user_id = message.from_user.id
    if db.check_user_exists(user_id):
        user_profile = db.get_user_profile(user_id)
        profile_text = (
            f"–†–æ–ª—å: {user_profile['role']}\n"  
            f"–û–ø—ã—Ç: {user_profile['experience']}\n"
            f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫: {user_profile['tech_stack']}\n"
            f"–ò–¥–µ—è: {user_profile['idea']}\n"
            f"LinkedIn: {user_profile['linkedin_profile']}\n"
            f"Hackathon Username: {user_profile.get('hackathon_username')}\n\n"
            "–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ \n[/editprofile]."
        )
        await message.answer(profile_text)
    else:
        markup = role_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=markup)
        await ProfileForm.role.set()

 @dp.message_handler(state=ProfileForm.role)
 async def process_role(message: Message, state: FSMContext):
    roles = ["Backend", "Frontend", "Mobile", "DevOps", "Full-stack", "QA", "UI Designer", "UX Designer", "ML", "PM"]
    if message.text in roles:
        await state.update_data(role=message.text)
        markup = experience_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:", reply_markup=markup)
        await ProfileForm.experience.set()
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —É–º–µ–Ω, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ :('
                             '\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–∏–Ω–æ–≥–¥–∞ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è, '
                             '–º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∫–Ω–æ–ø–∫–æ–π –≤—Ä–æ–¥–µ —ç—Ç–æ–π: üéõ).'
                             , reply_markup=role_keyboard())

 @dp.message_handler(state=ProfileForm.experience)
 async def process_experience(message: Message, state: FSMContext):
    experiences = ["–î–æ –≥–æ–¥–∞", "1-3 –≥–æ–¥–∞", "3-5 –ª–µ—Ç", "–°–≤—ã—à–µ 5 –ª–µ—Ç", "–ù–µ —Ä–∞–±–æ—Ç–∞—é"]
    if message.text in experiences:
        await state.update_data(experience=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:", reply_markup=ReplyKeyboardRemove())
        await ProfileForm.tech_stack.set()
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=experience_keyboard())
 
 
 @dp.message_handler(state=ProfileForm.tech_stack)
 async def process_tech_stack(message: Message, state: FSMContext):
    await state.update_data(tech_stack=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∏–¥–µ—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞? –ï—Å–ª–∏ –¥–∞, –æ–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ:", reply_markup=ReplyKeyboardRemove())
    await ProfileForm.idea.set()

 @dp.message_handler(state=ProfileForm.idea)
 async def process_idea(message: Message, state: FSMContext):
    await state.update_data(idea=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å LinkedIn:", reply_markup=ReplyKeyboardRemove())
    await ProfileForm.linkedin.set()

 @dp.message_handler(state=ProfileForm.linkedin)
 async def process_linkedin(message: Message, state: FSMContext):
    await state.update_data(linkedin_profile=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ ")
    await ProfileForm.hackathon_username.set()

 @dp.message_handler(state=ProfileForm.hackathon_username)
 async def process_hackathon_username(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞
    hackathon_username = message.text if message.text != '-' else None
    await state.update_data(hackathon_username=hackathon_username)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ telegram_username, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    telegram_username = None
    if message.from_user.username:
        telegram_username = "@" + message.from_user.username

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–±–æ–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.insert_user_profile(
        message.from_user.id, 
        user_data['role'], 
        user_data['experience'], 
        user_data['tech_stack'], 
        user_data['idea'], 
        user_data['linkedin_profile'],
        telegram_username,  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º telegram_username –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        user_data.get('hackathon_username')  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º hackathon_username
    )
    await message.answer(
        "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å: [/profile].\n"
        "–ù–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ [/editprofile]."
    )
    await state.finish()

 
 
 def generate_edit_menu():
    markup = InlineKeyboardMarkup()
    items = [
        ("–†–æ–ª—å", "edit_role"),
        ("–û–ø—ã—Ç", "edit_experience"),
        ("–¢–µ—Ö. —Å—Ç–µ–∫", "edit_tech_stack"),
        ("–ò–¥–µ—è", "edit_idea"),
        ("LinkedIn", "edit_linkedin"),
        ("Hackathon_username", "edit_hackathon_username")
    ]
    for text, callback_data in items:
        markup.add(InlineKeyboardButton(text, callback_data=callback_data))
    markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")) 
    return markup

 @dp.message_handler(Command("editprofile"), state=None)
 async def edit_profile_start(message: Message):
    markup = generate_edit_menu()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    await EditProfileForm.select_field.set()

 @dp.callback_query_handler(state=EditProfileForm.select_field)
 async def choose_field_to_edit(callback_query: CallbackQuery, state: FSMContext):
    field_map = {
        "edit_role": "role",
        "edit_experience": "experience",
        "edit_tech_stack": "tech_stack",
        "edit_idea": "idea",
        "edit_linkedin": "linkedin_profile",
        "edit_hackathon_username": "hackathon_username" 
    }
    await bot.answer_callback_query(callback_query.id)

    selected_field = callback_query.data
    if selected_field == "cancel_edit":
        await bot.send_message(callback_query.from_user.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å: [/profile].")
        await state.finish()
        return

    if selected_field not in field_map:
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(field_to_edit=field_map[selected_field])
    await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{selected_field.split('_')[1]}':")
    await EditProfileForm.new_value.set()

 @dp.message_handler(state=EditProfileForm.new_value)
 async def process_new_value(message: Message, state: FSMContext):
    user_data = await state.get_data()
    field_to_edit = user_data['field_to_edit']

    db.update_user_profile(message.from_user.id, field_to_edit, message.text)
    await message.answer(f"–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è '{field_to_edit}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ")

    markup = generate_edit_menu()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:", reply_markup=markup)
    await EditProfileForm.select_field.set()

 @dp.callback_query_handler(lambda c: c.data == "cancel_edit", state="*")
 async def cancel_edit(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ—Ñ–∏–ª—å: [/profile]")
    await state.finish()


 @dp.message_handler(Command("team"), state=None)
 async def team_command(message: Message):
    user_id = message.from_user.id
    user_profile = db.get_user_profile(user_id)

    if user_profile and all(user_profile.values()):  
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–∞–Ω–¥–µ
        team_id = db.get_team_of_user(user_id)
        if team_id:
            # –ï—Å–ª–∏ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
            await message.answer("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É.")
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            await message.answer("–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
            await TeamForm.name.set()
    else:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã [/profile].")

 
 @dp.message_handler(state=TeamForm.name)
 async def process_team_name(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–µ—à–∞ (/). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ—é –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
    await TeamForm.idea.set()

 
 @dp.message_handler(state=TeamForm.idea)
 async def process_team_idea(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–µ—à–∞ (/). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return
    await state.update_data(idea=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:", reply_markup=role_keyboard())
    await TeamForm.required_roles.set()

 
 @dp.message_handler(state=TeamForm.required_roles)
 async def process_team_roles(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer("–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–µ—à–∞ (/). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–æ–ª–∏.")
        return
    await state.update_data(required_roles=message.text)
    team_data = await state.get_data()
    team_id = db.create_team(
        message.from_user.id,
        team_data['name'], 
        team_data['idea'], 
        team_data['required_roles']
    )
    await message.answer(
        "–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ: [/myteam].\n"
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ [/editteam].",
        reply_markup=ReplyKeyboardRemove()  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    )
    await state.finish()
 
 def generate_team_edit_menu():
    markup = InlineKeyboardMarkup()
    items = [
        ("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", "edit_name"),
        ("–ò–¥–µ—è", "edit_idea"),
        ("–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏", "edit_required_roles")
    ]
    for text, callback_data in items:
        markup.add(InlineKeyboardButton(text, callback_data=callback_data))
    markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_team_edit"))
    return markup
 
 @dp.message_handler(Command("editteam"), state=None)
 async def edit_team_command(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º (–ª–∏–¥–µ—Ä–æ–º)
    team_info = db.get_team_by_user_id(message.from_user.id)
    if team_info:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.
        markup = generate_team_edit_menu()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        await EditTeamForm.select_field.set()
        await state.update_data(team_id=team_info['teamId'])
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏–¥–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã.
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



 @dp.callback_query_handler(state=EditTeamForm.select_field)
 async def choose_team_field_to_edit(callback_query: CallbackQuery, state: FSMContext):
    field_map = {
        "edit_name": "name",
        "edit_idea": "idea",
        "edit_required_roles": "required_roles"
    }
    await bot.answer_callback_query(callback_query.id)

    selected_field = callback_query.data
    if selected_field == "cancel_team_edit":
        await bot.send_message(callback_query.from_user.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.finish()
        return

    if selected_field not in field_map:
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(field_to_edit=field_map[selected_field])
    await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{selected_field.split('_')[1]}':")
    await EditTeamForm.new_value.set()

 @dp.message_handler(state=EditTeamForm.new_value)
 async def process_team_new_value(message: Message, state: FSMContext):
    team_data = await state.get_data()
    team_id = team_data.get('team_id')
    if team_id:
        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å —ç—Ç–∏–º ID.
        db.update_team(team_id, team_data['field_to_edit'], message.text)
        await message.answer(f"–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è '{team_data['field_to_edit']}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await state.finish()
    else:
        # –ï—Å–ª–∏ team_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ.
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.")
 
 